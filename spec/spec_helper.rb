# frozen_string_literal: true

require 'tmpdir'
require 'securerandom'
require 'logger'
require 'yaml'
require 'tempfile'

# Main application entry point
require_relative '../lib/connection'
require_relative '../lib/cleanbox'

# Start SimpleCov for code coverage reporting
require 'simplecov'
SimpleCov.start do
  add_filter '/spec/'
  add_filter '/vendor/'
end

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

# Add the lib directory to the load path
$LOAD_PATH.unshift File.expand_path('../lib', __dir__)

# Require core extensions
require 'core_ext'

# Require test dependencies
require 'rspec'
require 'webmock/rspec'
require 'vcr'
require 'mail'

# Require the main application files
require 'configuration'
require 'cli/cleanbox_cli'
require 'cli/config_manager'
require 'cli/secrets_manager'
require 'cli/cli_parser'
require 'auth/authentication_manager'
require 'message'
require 'message_processor'
require 'message_action_runner'
require 'connection'
require 'cleanbox'
require 'folder_checker'

class Configuration
  class << self
    def reload!
      load_config_file if @config_file_path
    end

    def reset!
      @options = nil
      @config_file_path = nil
      @data_dir = nil
      @config_loaded = false
      @original_command_line_options = nil
    end
  end
end

# Helper method for creating mock IMAP error responses
def mock_imap_error_response(text)
  OpenStruct.new(data: OpenStruct.new(text: text))
end

def test_home_config_dir
  @@test_home_config_dir ||= Dir.mktmpdir('cleanbox_test_home')
end

def test_home_config_path
  @@test_home_config_path ||= File.join(test_home_config_dir, '.cleanbox.yml')
end

RSpec.configure do |config|
  # Disable profiling output completely
  config.profile_examples = nil

  # Set log level to FATAL to suppress DEBUG/INFO messages during tests
  config.before(:suite) do
    # Override Logger to use FATAL level during tests
    Logger.class_eval do
      alias_method :original_initialize, :initialize
      def initialize(*args)
        original_initialize(*args)
        self.level = Logger::FATAL
      end
    end

    # Suppress Ruby warnings from gems
    $VERBOSE = nil
  end

  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

  # The settings below are suggested to provide a good initial experience
  # with RSpec, but feel free to customize to your heart's content.

  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = 'spec/examples.txt'

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  # https://rspec.info/features/3-12/rspec-core/configuration/zero-monkey-patching-mode/
  config.disable_monkey_patching!

  # This setting enables warnings. It's recommended, but in some cases may
  # be too noisy due to issues in dependencies.
  config.warnings = true

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = 'doc'
  end

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed

  # Configure VCR for HTTP request recording
  VCR.configure do |c|
    c.cassette_library_dir = 'spec/fixtures/vcr_cassettes'
    c.hook_into :webmock
    c.configure_rspec_metadata!

    # Filter out sensitive data
    c.filter_sensitive_data('<CLIENT_ID>') { ENV.fetch('CLEANBOX_CLIENT_ID', nil) }
    c.filter_sensitive_data('<CLIENT_SECRET>') { ENV.fetch('CLEANBOX_CLIENT_SECRET', nil) }
    c.filter_sensitive_data('<TENANT_ID>') { ENV.fetch('CLEANBOX_TENANT_ID', nil) }
  end

  # Clean up any temporary files after tests
  config.after(:suite) do
    FileUtils.rm_rf(Dir[File.join(Dir.pwd, 'tmp', 'test_*')])
    # Clean up relative directory created by configuration tests
    FileUtils.rm_rf(File.join(Dir.pwd, 'relative'))
  end

  # Set up test home config file
  config.before(:suite) do
    File.write(test_home_config_path, {}.to_yaml)
  end

  config.after(:suite) do
    FileUtils.rm_rf(test_home_config_dir)
  end

  # Configure Configuration for each test
  config.before(:each) do
    # Reset Configuration to a clean state for each test
    Configuration.reset! if Configuration.respond_to?(:reset!)

    # Mock home_config to use our test file
    allow(Configuration).to receive(:home_config).and_return(test_home_config_path)

    # Configure Configuration with the test options
    Configuration.configure(config_options)
  end
end

# Shared context for default configuration options
RSpec.shared_context 'default config options' do
  let(:config_options) do
    {
      data_dir: nil
    }
  end
end

# Include the shared context globally
RSpec.configure { |c| c.include_context 'default config options' }
